{"version":3,"sources":["logo.svg","addto/AddToHomeScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddToHomeScreen","props","DEFAULT_PROMPT","title","cancelMsg","installMsg","guidanceCancelMsg","src","DEFAULT_SESSION","lastDisplayTime","returningVisitor","displayCount","optedOut","added","pageViews","configuration","options","Object","assign","DEFAULT_CONFIGURATION","key","customPromptContent","customPromptElements","customPromptPlatformDependencies","hasOwnProperty","buildConfiguration","doLog","JSON","stringify","canPromptState","beforeInstallPromptEvent","autoHideTimer","session","platform","guidanceTargetUrls","isAthDialogShown","showNativePrompt","afterServiceWorkerCheck","serviceWorker","isCompatible","updateSession","debug","activateLogging","onInit","call","this","startAutomatically","show","logString","console","log","window","localStorage","setItem","appId","getPlatform","native","isChromium","undefined","isFireFox","isiPad","isiPhone","isOpera","isSamsung","isEdge","handleBeforeInstallPrompt","event","preventDefault","delayedShow","setTimeout","performShow","startDelay","document","readyState","onreadystatechange","toString","customCriteria","navigator","now","Date","displayPace","maxDisplayCount","isValidLocation","validLocation","length","i","test","location","href","isGuidanceURL","indexOf","minPageViews","isStandalone","onAdd","skipFirstVisit","canPrompt","mustShowCustomPrompt","triggerNativePrompt","target","athWrapper","querySelector","container","classList","remove","hideClass","promptTarget","showClasses","concat","index","add","promptDialogTitle","promptDialogLogo","logo","promptDialogCancelButton","cancelButton","promptDialogInstallButton","installButton","innerText","alt","addEventListener","handleInstall","action","ok","cancelPrompt","cancel","lifespan","autoHide","onShow","prompt","then","userChoice","choiceResult","outcome","onCancel","catch","err","message","closePrompt","onInstall","skipNative","clearTimeout","targetUrl","replace","images","promptDialogBannerBody","banner","promptDialogGuidanceBody","guidance","promptDialogGuidanceImageCell","guidanceImageCell","promptDialogGuidanceCancelButton","guidanceCancelButton","showClass","img","Image","classes","appendChild","guidanceCancel","element","dimensions","getBoundingClientRect","width","height","isVisible","hideAfter","showPlatformGuidance","useEffect","evt","userAgent","isIDevice","isInWebAppiOS","standalone","isInWebAppChrome","matchMedia","matches","isMobileSafari","checkPlatform","sessionString","getItem","parse","getRegistration","prompts","push","buildGuidanceURLs","className","containerAddOns","bannerAddOns","logoCell","logoCellAddOns","logoAddOns","titleCell","titleCellAddOns","titleAddOns","cancelButtonCell","cancelButtonCellAddOns","cancelButtonAddOns","installButtonCell","installButtonCellAddOns","installButtonAddOns","guidanceAddOns","guidanceImageCellAddOns","guidanceCancelButtonAddOns","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.3856e68b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\n\nimport './addToHomeScreen.scss';\nimport DEFAULT_CONFIGURATION from './addToHomeScreenConfiguration.json';\n\nexport default function AddToHomeScreen(props) {\n\n  const DEFAULT_PROMPT = {\n    title: 'Do you want to install this application on your homescreen?',\n    cancelMsg: 'Not now',\n    installMsg: 'Install',\n    guidanceCancelMsg: 'Close',\n    src: 'images/logos/default/StoreLogo.png'\n  };\n\n  const DEFAULT_SESSION = {\n    lastDisplayTime: 0, // last time we displayed the message\n    returningVisitor: false, // is this the first time you visit\n    displayCount: 0, // number of times the message has been shown\n    optedOut: false, // has the user opted out\n    added: false, // has been actually added to the home screen\n    pageViews: 0\n  };\n\n  let configuration = buildConfiguration();\n\n  doLog(`final configuration: ${ JSON.stringify(configuration) }`);\n\n  let session = {};\n  let platform = {};\n  let guidanceTargetUrls = [];\n  let isAthDialogShown = false;\n  let showNativePrompt = false;\n\n  let canPromptState;\n  let beforeInstallPromptEvent;\n  let autoHideTimer;\n\n  useEffect(initialize, []);\n\n  function initialize() {\n    if ('onbeforeinstallprompt' in window) {\n      doLog('add beforeinstallprompt listener');\n      window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      showNativePrompt = true;\n\n    }\n    if ('onappinstalled' in window) {\n      window.addEventListener('appinstalled', function (evt) {\n        doLog('A2HS installed');\n        session.added = true;\n        updateSession();\n        if (configuration.onInstall) {\n          configuration.onInstall.call(this);\n        }\n      });\n\n    }\n\n    checkPlatform();\n\n    let sessionString = window.localStorage.getItem(configuration.appId);\n    session = sessionString ? JSON.parse(sessionString) : DEFAULT_SESSION;\n    if (session && session.added) {\n      // there is nothing to do if app was already added to home screen\n      return;\n    }\n\n    if ('serviceWorker' in navigator) {\n      let manifestElement = document.querySelector('[rel=\\'manifest\\']');\n      if (!manifestElement) {\n        doLog('no manifest file');\n        platform.isCompatible = false;\n      }\n      setTimeout(function () {\n        // we wait 1 sec until we execute this because sometimes the browser needs a little time to register the service worker\n        navigator.serviceWorker.getRegistration().then(afterServiceWorkerCheck);\n        buildGuidanceURLs(configuration.customPromptPlatformDependencies);\n      }, 1000);\n    } else {\n      afterServiceWorkerCheck({});\n    }\n\n  }\n\n  function buildConfiguration() {\n    let options = Object.assign({}, DEFAULT_CONFIGURATION, props);\n\n    options.customPromptContent = Object.assign({}, DEFAULT_CONFIGURATION.customPromptContent, props.customPromptContent);\n    options.customPromptElements = Object.assign({}, DEFAULT_CONFIGURATION.customPromptElements, props.customPromptElements);\n    options.customPromptPlatformDependencies = Object.assign({}, DEFAULT_CONFIGURATION.customPromptPlatformDependencies, props.customPromptPlatformDependencies);\n\n    for (let key in DEFAULT_CONFIGURATION.customPromptPlatformDependencies) {\n      if (DEFAULT_CONFIGURATION.customPromptPlatformDependencies.hasOwnProperty(key)) {\n        if (props.customPromptPlatformDependencies) {\n          options.customPromptPlatformDependencies[key] = Object.assign({}, DEFAULT_CONFIGURATION.customPromptPlatformDependencies[key], props.customPromptPlatformDependencies[key]);\n        } else {\n          options.customPromptPlatformDependencies[key] = DEFAULT_CONFIGURATION.customPromptPlatformDependencies[key];\n        }\n      }\n    }\n    return options;\n  }\n\n  function buildGuidanceURLs(prompts) {\n    for (let key in prompts) {\n      if (prompts.hasOwnProperty(key)) {\n        let target = prompts[key].targetUrl;\n\n        doLog('building guidance urls: ' + key + target ? '/' + target : '');\n        if (target) {\n          guidanceTargetUrls.push(target);\n        }\n      }\n    }\n  }\n\n  // show hint images for browsers without native prompt\n  /*\n   * Currently:\n   *  iOS Safari\n   *  FireFox Android\n   *  Samsung Android\n   *  Opera Android\n   */\n  function showPlatformGuidance(skipNative) {\n    let target = getPlatform(skipNative);\n    doLog('showing platform guidance for: ' + target);\n    let athWrapper = document.querySelector(`.${ configuration.customPromptElements.container }`);\n\n    if (athWrapper) {\n      if (autoHideTimer) {\n        clearTimeout(autoHideTimer);\n      }\n\n      if (!skipNative && target === 'native' && beforeInstallPromptEvent) {\n        closePrompt();\n        triggerNativePrompt();\n      } else {\n        let promptTarget = Object.assign({}, DEFAULT_PROMPT, configuration.customPromptContent, configuration.customPromptPlatformDependencies[target]);\n\n        if (promptTarget.targetUrl) {\n          document.location.replace(promptTarget.targetUrl);\n        } else {\n          if (promptTarget.images && promptTarget.images.length > 0) {\n            let promptDialogBannerBody = athWrapper.querySelector(`.${ configuration.customPromptElements.banner }`);\n            let promptDialogGuidanceBody = athWrapper.querySelector(`.${ configuration.customPromptElements.guidance }`);\n            let promptDialogGuidanceImageCell = athWrapper.querySelector(`.${ configuration.customPromptElements.guidanceImageCell }`);\n            let promptDialogGuidanceCancelButton = athWrapper.querySelector(`.${ configuration.customPromptElements.guidanceCancelButton }`);\n\n            promptDialogBannerBody.classList.add(configuration.hideClass);\n            promptDialogGuidanceBody.classList.add(configuration.showClass);\n\n            for (let index = 0; index < promptTarget.images.length; index++) {\n              let img = new Image();\n\n              img.src = promptTarget.images[index].src;\n              img.alt = promptTarget.images[index].alt;\n\n              if (promptTarget.images[index].classes) {\n                img.classList.add(...promptTarget.images[index].classes);\n              }\n              promptDialogGuidanceImageCell.appendChild(img);\n            }\n\n            if (promptDialogGuidanceCancelButton) {\n              promptDialogGuidanceCancelButton.addEventListener('click', cancelPrompt);\n              promptDialogGuidanceCancelButton.classList.remove(configuration.hideClass);\n              promptDialogGuidanceCancelButton.innerText = promptTarget.guidanceCancelMsg != null ? promptTarget.guidanceCancelMsg :\n                  ((promptTarget.action && promptTarget.action.guidanceCancel) ? promptTarget.action.guidanceCancel : '');\n            }\n          }\n          if (!isVisible(athWrapper)) {\n            athWrapper.classList.add(...promptTarget.showClasses);\n            athWrapper.classList.remove(configuration.hideClass);\n          }\n\n          let hideAfter = (configuration.lifespan >= 10) ? configuration.lifespan : 10;\n\n          autoHideTimer = setTimeout(autoHide, hideAfter * 1000);\n        }\n      }\n    }\n  }\n\n  function isVisible(element) {\n    let dimensions = element.getBoundingClientRect();\n    return dimensions.width !== 0 && dimensions.height !== 0;\n  }\n\n  function afterServiceWorkerCheck(serviceWorker) {\n    if (!serviceWorker) {\n      doLog('no service worker');\n      platform.isCompatible = false;\n    }\n    doLog('service worker found - increasing page views');\n\n    session.pageViews += 1;\n    updateSession();\n\n    // override defaults that are dependent on each other\n    if (configuration && configuration.debug && (typeof configuration.activateLogging === 'undefined')) {\n      configuration.activateLogging = true;\n    }\n\n    // setup the debug environment\n    if (configuration.debug) {\n      platform.isCompatible = true;\n    }\n\n    if (configuration.onInit) {\n      configuration.onInit.call(this);\n    }\n\n    doLog('decide to show: autoStart: ' + configuration.startAutomatically + ' ### beforeInstallPromptEvent: ' + beforeInstallPromptEvent + ' ### showNativePrompt: ' + showNativePrompt);\n    if (configuration.startAutomatically && !!beforeInstallPromptEvent) {\n      doLog('autoStart - displaying call-out');\n      show();\n    } else if (!showNativePrompt) {\n      doLog('not showing native prompt - displaying call-out');\n      show();\n    } else {\n      doLog('did decide to show nothing');\n    }\n\n  }\n\n  function doLog(logString) {\n    if (configuration.activateLogging) {\n      console.log('Add to Homescreen: ' + logString);\n    }\n  }\n\n  function updateSession() {\n    window.localStorage.setItem(configuration.appId, JSON.stringify(session));\n  }\n\n  function checkPlatform() {\n    // browser info and capability\n    let userAgent = window.navigator.userAgent;\n    doLog('checking platform - found user agent: ' + userAgent);\n\n    platform.isIDevice = (/iphone|ipod|ipad/i).test(userAgent);\n    platform.isSamsung = /Samsung/i.test(userAgent);\n    platform.isFireFox = /Firefox/i.test(userAgent);\n    platform.isOpera = /opr/i.test(userAgent);\n    platform.isEdge = /edg/i.test(userAgent);\n\n    // Opera & FireFox only Trigger on Android\n    if (platform.isFireFox) {\n      platform.isFireFox = /android/i.test(userAgent);\n    }\n\n    if (platform.isOpera) {\n      platform.isOpera = /android/i.test(userAgent);\n    }\n\n    platform.isChromium = ('onbeforeinstallprompt' in window);\n    platform.isInWebAppiOS = (window.navigator.standalone === true);\n    platform.isInWebAppChrome = (window.matchMedia('(display-mode: standalone)').matches);\n    platform.isMobileSafari = platform.isIDevice && userAgent.indexOf('Safari') > -1 && userAgent.indexOf('CriOS') < 0;\n    platform.isStandalone = platform.isInWebAppiOS || platform.isInWebAppChrome;\n    platform.isiPad = (platform.isMobileSafari && userAgent.indexOf('iPad') > -1);\n    platform.isiPhone = (platform.isMobileSafari && userAgent.indexOf('iPad') === -1);\n    platform.isCompatible = (platform.isChromium || platform.isMobileSafari ||\n        platform.isSamsung || platform.isFireFox || platform.isOpera);\n  }\n\n  function getPlatform(native) {\n    if (configuration.debug && typeof configuration.debug === 'string') {\n      return configuration.debug;\n    }\n\n    if (platform.isChromium && native === undefined) {\n      return 'native';\n    } else if (platform.isFireFox) {\n      return 'firefox';\n    } else if (platform.isiPad) {\n      return 'ipad';\n    } else if (platform.isiPhone) {\n      return 'iphone';\n    } else if (platform.isOpera) {\n      return 'opera';\n    } else if (platform.isSamsung) {\n      return 'samsung';\n    } else if (platform.isEdge) {\n      return 'edge';\n    } else if (platform.isChromium) {\n      return 'chromium';\n    } else {\n      return '';\n    }\n  }\n\n  function handleBeforeInstallPrompt(event) {\n    event.preventDefault();\n    doLog('capturing the native A2HS prompt');\n    beforeInstallPromptEvent = event;\n    delayedShow();\n  }\n\n  function delayedShow() {\n    setTimeout(performShow, configuration.startDelay * 1000 + 500);\n  }\n\n  function show() {\n    // message already on screen\n    if (isAthDialogShown) {\n      doLog('not displaying call-out because already shown on screen');\n      return;\n    }\n\n    isAthDialogShown = true;\n\n    if (document.readyState === 'interactive' || document.readyState === 'complete') {\n      delayedShow();\n    } else {\n      document.onreadystatechange = function () {\n        if (document.readyState === 'complete') {\n          delayedShow();\n        }\n      };\n    }\n  }\n\n  function performShow() {\n    if (canPrompt()) {\n      if (beforeInstallPromptEvent && !configuration.mustShowCustomPrompt) {\n        doLog('show native prompt');\n        triggerNativePrompt();\n      } else {\n        let target = getPlatform();\n        let athWrapper = document.querySelector(`.${ configuration.customPromptElements.container }`);\n\n        doLog(`show generic prompt for platform ${ target }`);\n        if (athWrapper && !session.optedOut) {\n          athWrapper.classList.remove(configuration.hideClass);\n\n          let promptTarget = Object.assign({}, DEFAULT_PROMPT, configuration.customPromptContent, configuration.customPromptPlatformDependencies[target]);\n\n          if (promptTarget.showClasses) {\n            promptTarget.showClasses = promptTarget.showClasses.concat(configuration.showClasses);\n          } else {\n            promptTarget.showClasses = configuration.showClasses;\n          }\n\n          for (let index = 0; index < promptTarget.showClasses.length; index++) {\n            athWrapper.classList.add(promptTarget.showClasses[index]);\n          }\n\n          let promptDialogTitle = athWrapper.querySelector(`.${ configuration.customPromptElements.title }`);\n          let promptDialogLogo = athWrapper.querySelector(`.${ configuration.customPromptElements.logo }`);\n          let promptDialogCancelButton = athWrapper.querySelector(`.${ configuration.customPromptElements.cancelButton }`);\n          let promptDialogInstallButton = athWrapper.querySelector(`.${ configuration.customPromptElements.installButton }`);\n\n          if (promptDialogTitle && promptTarget.title) {\n            promptDialogTitle.innerText = promptTarget.title;\n          }\n\n          if (promptDialogLogo) {\n            if (promptTarget.src) {\n              promptDialogLogo.src = promptTarget.src;\n              promptDialogLogo.alt = promptTarget.title || 'Install application';\n            } else {\n              promptDialogLogo.remove();\n            }\n          }\n\n          if (promptDialogInstallButton) {\n            promptDialogInstallButton.addEventListener('click', handleInstall);\n            promptDialogInstallButton.classList.remove(configuration.hideClass);\n            promptDialogInstallButton.innerText = promptTarget.installMsg != null ? promptTarget.installMsg :\n                ((promptTarget.action && promptTarget.action.ok) ? promptTarget.action.ok : '');\n          }\n\n          if (promptDialogCancelButton) {\n            promptDialogCancelButton.addEventListener('click', cancelPrompt);\n            promptDialogCancelButton.classList.remove(configuration.hideClass);\n            promptDialogCancelButton.innerText = promptTarget.cancelMsg != null ? promptTarget.cancelMsg :\n                ((promptTarget.action && promptTarget.action.cancel) ? promptTarget.action.cancel : '');\n          }\n        }\n\n        if (configuration.lifespan && configuration.lifespan > 0) {\n          autoHideTimer = setTimeout(autoHide, configuration.lifespan * 1000);\n        }\n      }\n\n      // fire the custom onShow event\n      if (configuration.onShow) {\n        configuration.onShow.call(this);\n      }\n\n      // increment the display count\n      session.lastDisplayTime = Date.now();\n      session.displayCount++;\n      updateSession();\n    }\n\n  }\n\n  function canPrompt() {\n    if (canPromptState !== undefined) {\n      // already evaluated the situation, so don't do it again\n      doLog('canPrompt() already evaluated: ' + canPromptState.toString());\n      return canPromptState;\n    }\n\n    canPromptState = false;\n\n    if (configuration.customCriteria !== null) {\n      let passCustom = typeof configuration.customCriteria === 'function' ? configuration.customCriteria() : !!configuration.customCriteria;\n\n      if (!passCustom) {\n        doLog('not displaying call-out because a custom criteria was not met.');\n        return false;\n      }\n    }\n\n    // using a double negative here to detect if service workers are not supported\n    // if not then don't bother asking to add to install the PWA\n    if (!('serviceWorker' in navigator)) {\n      doLog('not displaying call-out because service workers are not supported');\n      return false;\n    }\n\n    // the device is not supported\n    if (!platform.isCompatible) {\n      doLog('not displaying call-out because device not supported');\n      doLog('platform: ' + JSON.stringify(platform));\n      return false;\n    }\n\n    let now = Date.now();\n    let lastDisplayTime = session.lastDisplayTime;\n\n    // we obey the display pace (prevent the message to popup too often)\n    if (now - lastDisplayTime < configuration.displayPace * 60000) {\n      doLog('not displaying call-out because displayed recently');\n      return false;\n    }\n\n    // obey the maximum number of display count\n    if (configuration.maxDisplayCount && session.displayCount >= configuration.maxDisplayCount) {\n      doLog('not displaying call-out because displayed too many times already');\n      return false;\n    }\n\n    // check if this is a valid location\n    // TODO: should include at least the home page here\n    // by default all pages are valid, which can cause issues on iOS\n    // TODO: maybe trigger a redirect back to the home page for iOS\n    let isValidLocation = !configuration.validLocation.length;\n\n    for (let i = configuration.validLocation.length; i--;) {\n      if (configuration.validLocation[i].test(document.location.href)) {\n        isValidLocation = true;\n        break;\n      }\n    }\n\n    if (!isValidLocation) {\n      doLog('not displaying call-out because not a valid location');\n      return false;\n    }\n\n    let isGuidanceURL = false;\n\n    for (let i = guidanceTargetUrls.length; i--;) {\n      if (document.location.href.indexOf(guidanceTargetUrls[i]) > -1) {\n        isGuidanceURL = true;\n        break;\n      }\n    }\n\n    if (isGuidanceURL) {\n      doLog('not displaying call-out because this is a guidance URL');\n      return false;\n    }\n\n    if (session.pageViews < configuration.minPageViews) {\n      doLog('not displaying call-out because not enough visits');\n      return false;\n    }\n\n    // critical errors:\n    if (session.optedOut) {\n      doLog('not displaying call-out because user opted out');\n      return false;\n    }\n\n    if (session.added) {\n      doLog('not displaying call-out because already added to the home screen');\n      return false;\n    }\n\n    // check if the app is in stand alone mode\n    // this applies to iOS\n    if (platform.isStandalone) {\n\n      // execute the onAdd event if we haven't already\n      if (!session.added) {\n        session.added = true;\n        updateSession();\n\n        if (configuration.onAdd) {\n          configuration.onAdd.call(this);\n        }\n      }\n\n      doLog('not displaying call-out because in standalone mode');\n      return false;\n    }\n\n    // check if this is a returning visitor\n    if (!session.returningVisitor) {\n      session.returningVisitor = true;\n      updateSession();\n\n      // we do not show the message if this is your first visit\n      if (configuration.skipFirstVisit) {\n        doLog('not displaying call-out because skipping first visit');\n        return false;\n      }\n    }\n\n    canPromptState = true;\n    return true;\n  }\n\n  /* displays native A2HS prompt & stores results */\n  function triggerNativePrompt() {\n    return beforeInstallPromptEvent.prompt()\n        .then(function () {\n          // Wait for the user to respond to the prompt\n          return beforeInstallPromptEvent.userChoice;\n        })\n        .then(function (choiceResult) {\n          session.added = (choiceResult.outcome === 'accepted');\n\n          if (session.added) {\n            doLog('user accepted the A2HS prompt');\n            if (configuration.onAdd) {\n              configuration.onAdd();\n            }\n          } else {\n            if (configuration.onCancel) {\n              configuration.onCancel();\n            }\n            session.optedOut = true;\n            doLog('user dismissed the A2HS prompt');\n          }\n          updateSession();\n          beforeInstallPromptEvent = null;\n\n        })\n        .catch(function (err) {\n          doLog(err.message);\n\n          if (err.message.indexOf('user gesture') > -1) {\n            configuration.mustShowCustomPrompt = true;\n            delayedShow();\n          } else if (err.message.indexOf('The app is already installed') > -1) {\n            doLog(err.message);\n            session.added = true;\n            updateSession();\n          } else {\n            doLog(err);\n            return err;\n          }\n        });\n  }\n\n  function cancelPrompt(event) {\n    event.preventDefault();\n    if (configuration.onCancel) {\n      configuration.onCancel();\n    }\n    closePrompt();\n    return false;\n  }\n\n  function closePrompt() {\n    let athWrapper = document.querySelector(`.${ configuration.customPromptElements.container }`);\n    if (athWrapper) {\n      let target = getPlatform();\n      let promptTarget = configuration.customPromptPlatformDependencies[target];\n      promptTarget.showClasses = promptTarget.showClasses.concat(configuration.showClasses);\n      athWrapper.classList.remove(...promptTarget.showClasses);\n    }\n  }\n\n  function handleInstall() {\n    if (configuration.onInstall) {\n      configuration.onInstall();\n    }\n    if (beforeInstallPromptEvent && (!configuration.debug || getPlatform() === 'native')) {\n      closePrompt();\n      triggerNativePrompt();\n    } else {\n      showPlatformGuidance(true);\n    }\n    return false;\n  }\n\n  function autoHide() {\n    let athWrapper = document.querySelector(`.${ configuration.customPromptElements.container }`);\n\n    closePrompt();\n    if (athWrapper) {\n      athWrapper.classList.add(configuration.hideClass);\n    }\n  }\n\n  return (\n      <div className={ `${ configuration.customPromptElements.container } ${ configuration.customPromptElements.containerAddOns }` }>\n        <div className={ `${ configuration.customPromptElements.banner } ${ configuration.customPromptElements.bannerAddOns }` }>\n          <div className={ `${ configuration.customPromptElements.logoCell } ${ configuration.customPromptElements.logoCellAddOns }` }>\n            <img alt=\"Application Logo\" className={ `${ configuration.customPromptElements.logo } ${ configuration.customPromptElements.logoAddOns }` }/>\n          </div>\n          <div className={ `${ configuration.customPromptElements.titleCell } ${ configuration.customPromptElements.titleCellAddOns }` }>\n            <div className={ `${ configuration.customPromptElements.title } ${ configuration.customPromptElements.titleAddOns }` }/>\n          </div>\n          <div className={ `${ configuration.customPromptElements.cancelButtonCell } ${ configuration.customPromptElements.cancelButtonCellAddOns }` }>\n            <button className={ `${ configuration.customPromptElements.cancelButton } ${ configuration.customPromptElements.cancelButtonAddOns }` }>Not Now</button>\n          </div>\n          <div className={ `${ configuration.customPromptElements.installButtonCell } ${ configuration.customPromptElements.installButtonCellAddOns }` }>\n            <button className={ `${ configuration.customPromptElements.installButton } ${ configuration.customPromptElements.installButtonAddOns }` }>Install</button>\n          </div>\n        </div>\n        <div className={ `${ configuration.customPromptElements.guidance } ${ configuration.customPromptElements.guidanceAddOns }` }>\n          <div className={ `${ configuration.customPromptElements.guidanceImageCell } ${ configuration.customPromptElements.guidanceImageCellAddOns }` }/>\n          <div className={ `${ configuration.customPromptElements.cancelButtonCell } ${ configuration.customPromptElements.cancelButtonCellAddOns }` }>\n            <button className={ `${ configuration.customPromptElements.guidanceCancelButton } ${ configuration.customPromptElements.guidanceCancelButtonAddOns }` }>Close</button>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nconst platformPropType = PropTypes.shape({\n  showClasses: PropTypes.arrayOf(PropTypes.string),\n  targetUrl: PropTypes.string,\n  images: PropTypes.arrayOf(PropTypes.shape({\n    src: PropTypes.string,\n    alt: PropTypes.string\n  })),\n  action: PropTypes.shape({\n    ok: PropTypes.string,\n    cancel: PropTypes.string,\n    guidanceCancel: PropTypes.string\n  })\n});\n\nAddToHomeScreen.propTypes = {\n  appId: PropTypes.string,\n  debug: PropTypes.string,\n  activateLogging: PropTypes.bool,\n  startAutomatically: PropTypes.bool,\n  skipFirstVisit: PropTypes.bool,\n  minPageViews: PropTypes.number,\n  startDelay: PropTypes.number,\n  lifespan: PropTypes.number,\n  displayPace: PropTypes.number,\n  mustShowCustomPrompt: PropTypes.bool,\n  maxDisplayCount: PropTypes.number,\n  validLocation: PropTypes.arrayOf(PropTypes.string),\n  onInit: PropTypes.func,\n  onShow: PropTypes.func,\n  onAdd: PropTypes.func,\n  onInstall: PropTypes.func,\n  onCancel: PropTypes.func,\n  showClasses: PropTypes.arrayOf(PropTypes.string),\n  showClass: PropTypes.string,\n  hideClass: PropTypes.string,\n  customCriteria: PropTypes.func,\n  customPromptContent: PropTypes.shape({\n    title: PropTypes.string,\n    src: PropTypes.string,\n    cancelMsg: PropTypes.string,\n    installMsg: PropTypes.string,\n    guidanceCancelMsg: PropTypes.string\n  }),\n  customPromptElements: PropTypes.shape({\n    container: PropTypes.string,\n    containerAddOns: PropTypes.string,\n    banner: PropTypes.string,\n    bannerAddOns: PropTypes.string,\n    logoCell: PropTypes.string,\n    logoCellAddOns: PropTypes.string,\n    logo: PropTypes.string,\n    logoAddOns: PropTypes.string,\n    titleCell: PropTypes.string,\n    titleCellAddOns: PropTypes.string,\n    title: PropTypes.string,\n    titleAddOns: PropTypes.string,\n    cancelButtonCell: PropTypes.string,\n    cancelButtonCellAddOns: PropTypes.string,\n    cancelButton: PropTypes.string,\n    cancelButtonAddOns: PropTypes.string,\n    installButtonCell: PropTypes.string,\n    installButtonCellAddOns: PropTypes.string,\n    installButton: PropTypes.string,\n    installButtonAddOns: PropTypes.string,\n    guidance: PropTypes.string,\n    guidanceAddOns: PropTypes.string,\n    guidanceImageCell: PropTypes.string,\n    guidanceImageCellAddOns: PropTypes.string,\n    guidanceCancelButton: PropTypes.string,\n    guidanceCancelButtonAddOns: PropTypes.string\n  }),\n  customPromptPlatformDependencies: PropTypes.shape({\n    native: platformPropType,\n    chromium: platformPropType,\n    edge: platformPropType,\n    iphone: platformPropType,\n    ipad: platformPropType,\n    firefox: platformPropType,\n    samsung: platformPropType,\n    opera: platformPropType\n  })\n};","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport AddToHomeScreen from './addto/AddToHomeScreen';\nfunction App() {\n  return (\n    <div className=\"App\">\n        kkkkkkk2\n        <AddToHomeScreen />\n      {/* <AddToHomeScreen\n            appId='add-to-homescreen-react'\n            startAutomatically={ true }\n            startDelay={ 0 }\n            lifespan={ 30 }\n            // skipFirstVisit={ true }\n            displayPace={ 0 }\n            customPromptContent={ {\n              title: 'Do you want to install Add-to-homescreen React Modified Behavior Example on your homescreen?',\n              cancelMsg: 'No',\n              installMsg: 'Yes, sure!',\n              guidanceCancelMsg: 'Dismiss',\n              src: 'images/ExampleLogo.png'\n            } }\n        /> */}\n      {/* </body> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}